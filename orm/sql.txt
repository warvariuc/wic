The DELETE statement follows the syntax:
DELETE FROM table_name [WHERE condition];
Any rows that match the WHERE condition will be removed from the table. If the WHERE clause is omitted, all rows in the table are removed. The DELETE statement should thus be used with caution.
The DELETE statement does not return any rows; that is, it will not generate a result set.
Executing a DELETE statement can cause triggers to run that can cause deletes in other tables. For example, if two tables are linked by a foreign key and rows in the referenced table are deleted, then it is common that rows in the referencing table would also have to be deleted to maintain referential integrity.


Insert statements have the following form:
INSERT INTO table (column1, [column2, ... ]) VALUES (value1, [value2, ... ])
The number of columns and values must be the same. If a column is not specified, the default value for the column is used. The values specified (or implied) by the INSERT statement must satisfy all the applicable constraints (such as primary keys, CHECK constraints, and NOT NULL constraints). If a syntax error occurs or if any constraints are violated, the new row is not added to the table and an error returned instead.

SELECT a.first_name AS f FROM authors AS a
JOIN books AS b
ON b.author = a.id
# AS defines alias which is used only for convenience (shorter names)

#mysql
delimiter $$

CREATE TABLE `products` (
  `product_id` int(31) unsigned NOT NULL AUTO_INCREMENT,
  `brand_id` int(10) unsigned NOT NULL,
  `category_id` int(10) unsigned NOT NULL,
  `shop_id` int(10) unsigned NOT NULL,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin NOT NULL,
  `price` decimal(18,2) unsigned DEFAULT '0.00' COMMENT 'Values for DECIMAL columns in MySQL 5.1 are stored using a binary format that packs nine decimal digits into 4 bytes.',
  `original_url` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'Original url of the product in store',
  `ratings_sum` bigint(20) unsigned NOT NULL DEFAULT '0',
  `ratings_count` int(10) unsigned NOT NULL DEFAULT '0',
  `thumbnail_url` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT 'Describes if product is already deleted',
  `sphinx` text COLLATE utf8_bin COMMENT 'Additional info stored here for sphinx indexing',
  `date_added` datetime NOT NULL,
  `date_checked` datetime NOT NULL,
  `thumbnail_downloaded` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `clicks` bigint(20) unsigned NOT NULL DEFAULT '0',
  `store_rating_sum` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'Item''s rating from store',
  `store_rating_count` int(10) unsigned NOT NULL DEFAULT '0',
  `auction` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `comments_count` int(10) unsigned DEFAULT NULL,
  `object_id` varchar(32) COLLATE utf8_bin NOT NULL,
  `expire_time` datetime DEFAULT NULL,
  `current_bid` decimal(18,2) unsigned DEFAULT '0.00',
  PRIMARY KEY (`product_id`),
  UNIQUE KEY `sdfg` (`shop_id`,`object_id`),
  KEY `brand_id` (`brand_id`),
  KEY `category_id` (`category_id`),
  KEY `shop_id` (`shop_id`),
  CONSTRAINT `brand_id` FOREIGN KEY (`brand_id`) REFERENCES `brands` (`brand_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `category_id` FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `shop_id` FOREIGN KEY (`shop_id`) REFERENCES `shops` (`shop_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Sold items'$$







# sqlite:

CREATE TABLE "authors" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "first_name" VARCHAR, "last_name" VARCHAR, "birth_date" DATETIME);
CREATE TABLE "books" ("id" INTEGER PRIMARY KEY  NOT NULL ,"name" VARCHAR NOT NULL ,"price" INTEGER,"author" INTEGER,"_price" DECIMAL(10, 2));
CREATE INDEX "1" ON "authors" ("birth_date" ASC);
CREATE INDEX "ddd" ON "authors" ("first_name" ASC, "last_name" DESC);
CREATE UNIQUE INDEX "i4" ON "authors" ("last_name" DESC);


# primary key on multiple columns
CREATE TABLE something ( column1 INTEGER not null , column2 INTEGER not null , value, PRIMARY KEY ( column1,column2));


#postgres

CREATE TABLE public.test_table
(col1 int8 NOT NULL,
col2 char(25),
col3 varchar(25),
col4 numeric(10),
col5 date,
PRIMARY KEY (col1),
UNIQUE (col3))