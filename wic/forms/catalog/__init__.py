"""Author: Victor Varvariuc <victor.varvariuc@gmail.com"""

import sys
from PyQt4 import QtGui, QtCore

import orm

from wic.widgets.w_date_edit import WDateEdit
from wic.widgets.w_decimal_edit import WDecimalEdit
from wic.menu import createAction, addItemsToMenu
from wic.forms import WForm, getValue, setValue, openForm
from wic import Bunch


class CatalogItemForm(WForm):
    """Form of a catalog item."""

    uiFilePath = None # autogenerated by default
    formTitle = 'Catalog item'
    iconPath = ':/icons/fugue/card-address.png'
    catalogItem = None

    def __init__(self, catalogItem, **kwargs):
        super().__init__(catalogItem = catalogItem, **kwargs)

    def setupUi(self):
        """Initial setting up of the form. Reimplemented.
        Dynamically create form fields, if no ui file is supplied. 
        Fill form fields with data from DB."""
        self.formTitle = '%s item' % self.catalogItem.__class__
        if not self.uiFilePath: # automatically generated form
            self.createWidgets()
        self.setupWidgets()
        super().setupUi()
        self.fillFormFromItem(self.catalogItem)

    def createWidgets(self):
        """Automatically create on the form widgets and labels for each catalog model field."""
        formLayout = QtGui.QFormLayout(self)
        formLayout.setMargin(2)
        for field in self.catalogItem.__class__:
            fieldName = field.name
            assert not hasattr(self, fieldName), 'Form already has attribute with name ""%s' % fieldName
            labelName = 'label_' + fieldName
            label = QtGui.QLabel(fieldName)
            label.setObjectName(labelName)
            widget = self.createWidgetForField(field)
            #widget.setObjectName(fieldName)
            setattr(self, fieldName, widget)
            label.setBuddy(widget)
            formLayout.addRow(label, widget)

        self.buttonBox = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Reset
                        | QtGui.QDialogButtonBox.Save | QtGui.QDialogButtonBox.Cancel)
        formLayout.addRow(self.buttonBox)
        self.formLayout = formLayout

    def setupWidgets(self):
        """Set up widgets which are mapped to catalog model fields. 
        Connect button box signals to the corresponding handlers."""
        for field in self.catalogItem.__class__:
            widget = getattr(self, field.name, None)
            if widget:
                self.setupWidgetForField(widget, field)

    def fillFormFromItem(self, catalogItem):
        'Automatically fill the form fields using values from the catalog item fields.'
        assert isinstance(catalogItem, orm.Model)
        for field in catalogItem.__class__:
            fieldName = field.name
            fieldValue = catalogItem[field]
            widget = getattr(self, fieldName, None)
            if widget:
                setValue(widget, fieldValue)

    def fillItemFromForm(self, catalogItem):
        'Automatically fill the item field values from the corresponding form widgets.'
        assert isinstance(catalogItem, orm.Model)
        for field in catalogItem.__class__:
            fieldName = field.name
            widget = getattr(self, fieldName, None)
            if widget:
                fieldValue = getValue(widget)
                if isinstance(field, (orm.IdField, orm.RecordIdField)) and not fieldValue:
                    fieldValue = None
                setattr(catalogItem, fieldName, fieldValue)

    def onSave(self):
        ''
        print('save!')
        catalogItem = self.catalogItem
        self.fillItemFromForm(catalogItem)
        catalogItem.save()

        # update item id and timestamp on the form
        idWidget = getattr(self, '_id', None)
        if idWidget:
            setValue(idWidget, catalogItem._id)
        timestampWidget = getattr(self, '_timestamp', None)
        if timestampWidget:
            setValue(timestampWidget, catalogItem._timestamp)


    @staticmethod
    def createWidgetForField(field):
        assert isinstance(field, orm.Field)
        if isinstance(field, (orm.CharField, orm.IntegerField, orm.IdField, orm.RecordIdField, orm.DateTimeField)):
            return QtGui.QLineEdit()
        elif isinstance(field, orm.DecimalField):
            return WDecimalEdit()
        elif isinstance(field, orm.DateField):
            return WDateEdit()
        elif isinstance(field, orm.BooleanField):
            return QtGui.QCheckBox(field.name)
        elif isinstance(field, orm.TextField):
            return QtGui.QPlainTextEdit()
        raise Exception('Could not create a widget for field %s' % field)

    @staticmethod
    def setupWidgetForField(widget, field):
        """Set up a widget which corresponds to an model field - only the details related to data entering to appearance.
        The widget might be autocreated or one from a *.ui file."""
        assert isinstance(field, orm.Field) and isinstance(widget, QtGui.QWidget)
        if isinstance(field, orm.CharField):
            if isinstance(widget, QtGui.QLineEdit):
                widget.setMaxLength(field.maxLength)
        elif isinstance(field, (orm.IdField, orm.RecordIdField)):
            if isinstance(widget, QtGui.QLineEdit):
                widget.setValidator(QtGui.QIntValidator())
        elif isinstance(field, orm.DateTimeField):
            if isinstance(widget, QtGui.QLineEdit):
                widget.setInputMask('9999-99-99 99:99:99.999999;0')
        elif isinstance(field, orm.DecimalField):
            if isinstance(widget, WDecimalEdit):
                widget.setMaxDigits(field.maxDigits)
                widget.setFractionDigits(field.fractionDigits)



def openCatalogItemForm(catalogItem, FormClass = None):
    assert isinstance(catalogItem, orm.Model), 'Pass an item (model instance).'
    kwargs = dict(catalogItem = catalogItem)
    if FormClass is None:
        formModulePath = catalogItem.__class__.__module__
        FormClass = getattr(sys.modules[formModulePath], 'Form', None)
        if FormClass is None: # if user form not present - take CatalogItemForm with autogenerated widgets
            FormClass = CatalogItemForm
            uiFilePath = ''
        else:
            uiFilePath = FormClass.uiFilePath
        kwargs['uiFilePath'] = uiFilePath

    assert issubclass(FormClass, CatalogItemForm), 'This is not a CatalogItemForm'
    return openForm(FormClass, **kwargs)




from .w_catalog_model import WCatalogModel


class CatalogForm(WForm):
    """Form with a list of catalog items."""

    uiFilePath = None
    formTitle = 'Catalog'
    iconPath = ':/icons/fugue/cards-stack.png'
    catalogModel = None
    toolbarVisible = True

    #editRequested = QtCore.pyqtSignal()

    def __init__(self, catalogModel, db):
        super().__init__(catalogModel = catalogModel, db = db)

    def setupUi(self):
        """Initial setting up of the form.
        Dynamically create form widgets, if no ui file is supplied. 
        Fill form fields with data from DB."""
        self.formTitle = '%s catalog' % self.catalogModel
        if not self.uiFilePath: # automatically generated form
            self.createWidgets()
        super().setupUi()
        self.toolbar.setVisible(self.toolbarVisible)
        self.tableView.setModel(WCatalogModel(self.db, self.catalogModel))
        self.tableView.selectionModel().selectionChanged.connect(self.onSelectionChanged)

    def createWidgets(self):
        """Automatically create on the form widgets and labels for each catalog model field."""
        layout = QtGui.QVBoxLayout(self)
        layout.setMargin(2)

        self.toolbar = self.createToolbar()
        layout.addWidget(self.toolbar)

        self.tableView = self.createTableView()
        layout.addWidget(self.tableView)

        self.buttonBox = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Close)
        layout.addWidget(self.buttonBox) # add standard button box at the bottom

        self.layout = layout

    def createTableView(self):
        tableView = QtGui.QTableView()
        #self.tableView.verticalHeader().hide()
        tableView.setSelectionBehavior(tableView.SelectRows)
        tableView.setSelectionMode(tableView.SingleSelection)
        tableView.verticalHeader().setResizeMode(QtGui.QHeaderView.Fixed)
        #tableView.verticalHeader().setDefaultSectionSize(...)
        #tableView.resizeColumnsToContents()
        tableView.installEventFilter(self)
        tableView.doubleClicked.connect(self.menu.editItem.trigger)
        tableView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        tableView.customContextMenuRequested.connect(self.showContextMenu)
        return tableView

    def eventFilter(self, tableView, event): # target - tableView
        if event.type() == QtCore.QEvent.KeyPress:
            key = event.key()
            if event.modifiers() in (QtCore.Qt.NoModifier, QtCore.Qt.KeypadModifier):
                if key in (QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return):
                    self.menu.editItem.trigger()
                    return True
        if event.type() == QtCore.QEvent.MouseButtonDblClick:
            if event.button() == QtCore.Qt.LeftButton:
                self.menu.editItem.trigger()
                return True
        return super().eventFilter(tableView, event) # standard event processing        

    def createToolbar(self):
        toolbar = QtGui.QToolBar()
        menu = Bunch()
        menu.createItem = createAction(toolbar, 'Create new item', self.createItem, 'Insert', ':/icons/fugue/plus.png')
        menu.editItem = createAction(toolbar, 'Edit selected item', self.editItem, 'Enter', ':/icons/fugue/pencil.png')
        menu.deleteItem = createAction(toolbar, 'Delete selected item', self.deleteItem, 'Delete', ':/icons/fugue/cross.png')   
        addItemsToMenu(toolbar, (menu.createItem, menu.editItem, menu.deleteItem))
        toolbar.setIconSize(QtCore.QSize(16, 16))
        self.menu = menu
        return toolbar

    def onSelectionChanged(self):
        currentIndex = self.tableView.selectionModel().currentIndex()
        self.menu.editItem.setEnabled(currentIndex.isValid())
        
    def showContextMenu(self, coord):
        menu = QtGui.QMenu(self.tableView)
        addItemsToMenu(menu, (self.menu.createItem, self.menu.editItem, self.menu.deleteItem))
        menu.popup(self.tableView.viewport().mapToGlobal(coord))


    def createItem(self):
        catalogItem = self.catalogModel(self.db)
        openCatalogItemForm(catalogItem, CatalogItemForm)
        
    def editItem(self):
        currentIndex = self.tableView.selectionModel().currentIndex()
        print('editItem')
        
    def deleteItem(self):
        QtGui.QMessageBox.question(self, 'Delete', 'Are you sure?', QtGui.QMessageBox.Yes | QtGui.QMessageBox.Cancel)


def openCatalogForm(catalogModel, db, FormClass = None):
    assert orm.isModel(catalogModel), 'Pass a model class.'
    if FormClass is None:
        formModulePath = catalogModel.__module__
        FormClass = getattr(sys.modules[formModulePath], 'CatalogForm', CatalogForm)

    assert issubclass(FormClass, CatalogForm), 'This is not a CatalogForm'
    return openForm(FormClass, catalogModel, db)
