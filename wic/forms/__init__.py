"""Author: Victor Varvariuc <victor.varvariuc@gmail.com"""

import os, sys, traceback
from PyQt4 import QtGui, QtCore, uic
from wic.widgets.w_date_edit import WDateEdit
from wic.widgets.w_decimal_edit import WDecimalEdit
import orm
import wic


class FormNotFoundError(Exception):
    """Raised when a form is not found"""


def setValue(widget, value):
    """Automatically set a widget's value depending on its type."""
    if isinstance(widget, QtGui.QPlainTextEdit):
        widget.setPlainText('' if value is None else str(value))
    elif isinstance(widget, QtGui.QTextEdit):
        widget.setHtml('' if value is None else str(value))
    elif isinstance(widget, QtGui.QCheckBox):
        widget.blockSignals(True) # http://stackoverflow.com/questions/1856544/qcheckbox-is-it-really-not-possible-to-differentiate-between-user-induced-change
        widget.setChecked(bool(value))
        widget.blockSignals(False)
    elif isinstance(widget, WDateEdit):
        widget.setDate(value)
    elif isinstance(widget, (WDecimalEdit, QtGui.QSpinBox)):
        widget.setValue(value)
    elif isinstance(widget, QtGui.QLineEdit):
        widget.setText('' if value is None else str(value))
        widget.home(False)
    elif isinstance(widget, QtGui.QPushButton):
        widget.setText(str(value))
    elif isinstance(widget, QtGui.QLabel):
        widget.setText(value)
    elif isinstance(widget, QtGui.QComboBox):
        lineEdit = widget.lineEdit()
        if lineEdit: #Only editable combo boxes have a line edit
            lineEdit.setText(value)
    elif isinstance(widget, QtGui.QSpinBox):
        widget.setValue(int(value))
    elif isinstance(widget, QtGui.QCheckBox):
        widget.setChecked(value)

def getValue(widget):
    """Automatically extract a widget's value depending on its type."""
    if isinstance(widget, QtGui.QPlainTextEdit):
        return widget.toPlainText()
    elif isinstance(widget, QtGui.QTextEdit):
        return widget.toHtml()
    elif isinstance(widget, QtGui.QCheckBox):
        return widget.isChecked()
    elif isinstance(widget, WDecimalEdit):
        return widget.value()
    elif isinstance(widget, WDateEdit):
        return widget.date()
    elif isinstance(widget, QtGui.QSpinBox):
        return widget.value()
    elif isinstance(widget, (QtGui.QLineEdit, QtGui.QPushButton)):
        return widget.text()
    elif isinstance(widget, QtGui.QComboBox):
        lineEdit = widget.lineEdit()
        if lineEdit: #Only editable combo boxes have a line edit
            return lineEdit.text()
    elif isinstance(widget, QtGui.QSpinBox):
        return widget.value()
    elif isinstance(widget, QtGui.QCheckBox):
        return bool(widget.isChecked())


class WFormWidgetsProxy():
    """Перехватчик виджетов формы. 
    Т.е. вместо form.checkBox.setChecked(True), можно писать form._.checkBox = True или form._['checkBox'] = True."""
    def __init__(self, form):
        assert isinstance(form, QtGui.QWidget)
        super().__setattr__('_form', form) # to bypass overriden __setattr__

    def __setattr__(self, name, value):
        widget = getattr(self._form, name)
        setValue(widget, value)

    def __getattr__(self, name):
        widget = getattr(self._form, name)
        return getValue(widget)

    def __getitem__(self, name):
        return self.__getattr__(name)

    def __setitem__(self, name, value):
        self.__setattr__(name, value)



class WForm(QtGui.QDialog):
    """Base for user forms."""

    uiFilePath = 'form.ui' # absolute or relative path to the ui file
    iconPath = ':/icons/fugue/application-form.png'
    formTitle = 'Form'

    closed = QtCore.pyqtSignal() # emitted when the form is closing

    def __init__(self, **kwargs):
        super().__init__(None) # no parent upon creation
        self.__dict__.update(kwargs)
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)

        if self.uiFilePath: # not autogenerated
            if not os.path.isabs(self.uiFilePath): # ui file path is relative. extract module path
                module = sys.modules[self.__class__.__module__] # module in which the Form class was defined
                moduleDir = os.path.dirname(os.path.abspath(module.__file__))
                self.uiFilePath = os.path.join(moduleDir, self.uiFilePath)

        self.setupUi()

        self._ = WFormWidgetsProxy(self)

        try:
            self.onOpen()
        except Exception:
            traceback.print_exc()

    def setupUi(self):
        """Initial setting up of the form. 
        Catalog item forms fill form fields with data from DB."""
        self.setWindowTitle(self.formTitle)
        self.setWindowIcon(QtGui.QIcon(self.iconPath))
        if self.uiFilePath: # not autogenerated
            uic.loadUi(self.uiFilePath, self)

        buttonBox = getattr(self, 'buttonBox', None)
        if buttonBox: # if button box is present - listen to its signals
            saveButton = buttonBox.button(buttonBox.Save)
            if saveButton: # change Save button's role
                buttonBox.addButton(saveButton, buttonBox.ApplyRole)
                saveButton.clicked.connect(self.onSave)
                saveShortCut = QtGui.QShortcut(QtGui.QKeySequence('F2'), self)
                saveShortCut.activated.connect(saveButton.animateClick)
            resetButton = buttonBox.button(buttonBox.Reset)
            if resetButton:
                resetButton.clicked.connect(self.fillFormFromItem)
            buttonBox.rejected.connect(self.reject)

    def done(self, resultCode): # accept/reject by default bypasses closeEvent
        super().done(resultCode)
        self.close()

    def closeEvent(self, event):
        if self.onClose() == False: # вызов предопределенной процедуры
            event.ignore()
            return
        self.closed.emit()

    def onClose(self):
        return

    def onOpen(self):
        return



def addSubwindow(widget):
    window = wic.mainWindow.mdiArea.addSubWindow(widget) # create subwindow with the form
    window.setWindowIcon(widget.windowIcon())
    window.show()
    widget.closed.connect(window.close) # when form closes - close subwindow too


def openForm(FormClass, *args, **kwargs):
    assert issubclass(FormClass, WForm), 'This is not a WForm.'
    form = FormClass(*args, **kwargs) # no parent widget for now
    addSubwindow(form)
    return form



from wic.forms.catalog import WCatalogModel, openCatalogForm, openCatalogItemForm, CatalogItemForm
